#!/usr/bin/perl
# ------------------- NoDeny ------------------
# Copyright (с) Volik Stanislav, 2008..2012
# Read license http://nodeny.com.ua/license.txt
# ---------------------------------------------
# названия тарифов будут отфильтрованы по out и по mysql, т.е нигде не нужно дополнительно фильтровать
use nomoney;

sub Get_fields
{
 return map{$p->{$_} }(@_);
}

$Adm->{pr}{tarifs} or Error('Вам не разрешено просматривать тарифы.');

%Flags=(
 'a' => 'разрешить клиентам через клиентскую статистику заказывать данный пакет на следующий месяц',
 'b' => 'если у клиента выбран данный пакет, то клиент не может заказать автоматическую смену пакета в следующем месяце',
 'c' => 'если у клиента выбран данный пакет и разрешено заказывать пакеты, то клиент может заказывать только пакеты из текущего пресета',
 'd' => 'у клиентов данного пакета почтовый ящик должен быть заблокирован',
 'f' => 'невыработанный трафик переносить на следующий месяц',
 'g' => 'для данного тарифа не осуществлять пропорциональное преобразование данных для новых клиентов, т.е. день начала потребления услуг будет установлен в ноль для таких клиентов',
 'h' => 'полностью отключить детализацию трафика',
 'j' => 'ограничение скорости действительно и для трафика между клиентами',
 'k' => 'доступ должен быть заблокирован всегда',
 'm' => 'при появлении денежной переработки разрешить клиенту в клиентской статистике докупить дополнительный пакета в этом же месяце. '.
        'Будет произведено снятие за текущий пакет и выдан новый, который будет активирован с текущего момента. Трафик клиента будет обнулен',
 'n' => 'удвоение скорости в период времени, указанный в тарифе',
 'p' => 'включить скрипты. Лицензирование обязательно!',
 'x' => 'ограничение скорости не действительно для трафика направления 2',
 'y' => 'ограничение скорости не действительно для трафика направления 3',
 'z' => 'ограничение скорости не действительно для трафика направления 4', 
); 

$m_tarif<1 && &Error("Укажите в настройках количество тарифных планов.");

$Fact=$F{act};
$Fid=int $F{id};

%subs=(
 'list' => 1,
 'show' => 1,
 'save' => 1,
);


$Fact='list' if !defined $subs{$Fact}; 
&{$Fact};
&Exit;

sub list
{# список тарифов
 $sth=&sql($dbh,"SELECT * FROM plans2 WHERE id<=$m_tarif");
 while( $p=$sth->fetchrow_hashref )
 {
    $i=$p->{id};
    $Plan_name{$i}=$p->{name};
    ($Plan_preset{$i},$Plan_offices{$i},$Plan_m1{$i},$Plan_m2{$i},$Plan_m3{$i},$Plan_m4{$i},$Plan_flags{$i},$Plan_speed{$i})=
      &Get_fields('preset','offices','mb1','mb2','mb3','mb4','flags','speed');
 } 

 $out='';
 for $i (1..$m_tarif)
 {  # создадим в базе отсутствующие тарифы
    defined $Plan_name{$i} && next;
    $rows=Db->do("INSERT INTO plans2 SET id=$i");
    $out.="Создан тариф №$i.".$br if $rows==1;
 }
 Show MessageBox('Информативное сообщение:'.$br2.$out) if $out;

 @out=();
 foreach $i (sort {$Plan_name{$a} cmp $Plan_name{$b}} keys %Plan_name)
 {
    $Plan_name{$i} or next;
    $sort_prefix=$Plan_name{$i};
    $sort_prefix=($Plan_name{$i}=~/^\[(\d+)\]/)? $1 : '';
    $sort_prefix-=1000 if $sort_prefix>1000;
    $p=$Plan_preset{$i};
    $out{$p}||=&RRow('head','3','Пресет № '.v::bold($p).". $Presets{$p}");
    $h='';
    foreach( 1..4 )
    {
       $h.="Направление <b>$_</b> анлим. " if ${"Plan_m$_"}{$i}>=$cfg::unlim_mb;
    }
    $h.="Ограничение по скорости. " if $Plan_speed{$i};
    $h.="Заблокиров. почтовый ящик. " if $Plan_flags{$i}=~/d/;
    $h.="Невыработанный трафик переносить на следующий месяц. " if $Plan_flags{$i}=~/f/;
    $h.="Разрешено заказывать на следующий месяц. " if $Plan_flags{$i}=~/a/;
    $h.="Удвоение скорости в указанный промежуток времени. " if $Plan_flags{$i}=~/n/;
    $out{$p}.=&RRow('*','rll',
       $sort_prefix,
       &ahref("$scrpt&act=show&id=$i",&Del_Sort_Prefix($Plan_name{$i})),
       $h
    );
 }

 $out=join '',map{ $out{$_} } sort{ $a <=> $b } keys %out;
 Show Table('tbg3 width100 nav3',$out);

 $out=join ' &nbsp;&nbsp;', map {&ahref("$scrpt&act=show&id=$_",$_)} (grep !$Plan_name{$_}, 1..$m_tarif);
 Show $br2.&div('message lft','Свободные пакеты:'.$br.$out) if $out;

 $out='';
 $sth=&sql($dbh,"SELECT p.*,a.admin,a.name FROM pays p LEFT JOIN admin a ON a.id=p.admin_id ".
    "WHERE p.type=50 AND p.category IN (471,472) ORDER BY p.time DESC LIMIT 15");
 while ($p=$sth->fetchrow_hashref)
 {
    $tt=$p->{time};
    # выделим красным цветом если редактирование было в последние 24 часа
    $out.=&tag( 'span',&the_time($tt),'class='.($tt>($t-24*3600)? 'error' : 'disabled') ).' '.v::bold($p->{admin}).': '.v::filtr($p->{coment}).$br;
 }
 Show $out && $br2."Последние редактирования тарифов:".$br.&div('message lft',$out);
}

# ==========================
#  Сохранение данных тарифа
# ==========================

sub save
{# Проверим уровнь доступа
 $Adm->{pr}{edt_tarifs} or Error('Вам не разрешено менять тарифы.');

 $p=&sql_select_line($dbh,"SELECT * FROM plans2 WHERE id=$Fid");
 $p or &Error("Ошибка получения данных тарифа № $Fid. Данные тарифа не изменены.");

 ($old_name,$preset)=&Get_fields('name','preset');

 $old_name=&Filtr($old_name); # на всякий случай (ручное редактирование базы)
 $preset=int $F{preset};
 $sort_prefix=int $F{sort_prefix}+1000;
 $name=&Filtr($F{name});
 $name='0.' if $name eq '0'; # необходимо чтобы if $name давал true (тариф существует)
 $cname=$name? 'пакета '.v::commas($name) : 'освобожденного пакета';
 $name="[$sort_prefix]$name" if $name;

 $price=$F{price}+0;
 $price_change=$F{price_change}+0;
 $m2_to_m1=$F{m2_to_m1}+0;
 $k=$F{k}+0;

 $start_hour=$F{s};
 $end_hour=$F{e};
 @f=(\$start_hour,'начала',\$end_hour,'окончания');
 while( $i=shift @f )
 {
    $h=shift @f;
    if( $$i && ($$i!~/^\d\d?$/ || $$i>23) )
    {
        $$i=0;
        ErrorMess("Предупреждение: `час $h доступа` $cname имеет неверное значение, устанавливаю в 0.");
    }
    $$i=int $$i;
 }

 @m=@InOrOut=@o=();
 foreach $i (1..4)
 {
    $m[$i]=&trim($F{"m$i"});
    $m[$i]=$m[$i] eq '!'? $cfg::unlim_mb : int $m[$i];
    $InOrOut[$i]=int $F{"w$i"};
    $o[$i]=$F{"o$i"}+0;
    if( $i>1 && $m[$i] && $o[$i]==0 )
    {
        ErrorMess("<b>Предупреждение</b>: в пакете $cname в направлении № $i установлен предоплаченный трафик, однако цена переработки равна нулю. ".
         "Цена переработки равная нулю означает, что направление № $i именно для <b>данного</b> пакета будет считаться 1м направлением. Таким образом, ".
         "предоплаченный трафик направления №$i будет проигнорирован при тарификации. ".
         "Если вы не хотите чтобы это направление перераспределялось на первое - установите переработку в ненулевое значение. Если вы хотите сделать ".
         "безлимитное направление - установите предоплаченный трафик в значение ".v::commas('!').' (символ '.v::commas('восклицательный знак').'), '.
         "а переработку в 1 $gr/Мб. В таком случае трафик будет подменяться названием 'безлимитный', а цена переработки отображена не будет")
    }
 }

 $flags=join '', grep $F{"flag$_"}, ('a'..'z');

 $speed=int $F{speed};
 $speed_out=int $F{speed_out};
 $speed2=int $F{speed2};
 $newuser_opt=int $F{newuser_opt};

 $offices = join ',', grep{ $F{"of_$_"} } sort{ $a <=> $b } keys %cfg::Offices;
 $offices = ",$offices," if $offices;

 $usr_grp = join ',', grep{ $F{"ugrp_$_"} } sort{ $a <=> $b } keys %$Ugrp;
 $usr_grp = ",$usr_grp," if $usr_grp;

 $pays_opt='';

 $sql="UPDATE plans2 SET ".
   "name='$name',price=$price,price_change=$price_change, ".
   "mb1=$m[1],mb2=$m[2],mb3=$m[3],mb4=$m[4], ".
   "priceover1=$o[1],priceover2=$o[2],priceover3=$o[3],priceover4=$o[4], ".
   "in_or_out1=$InOrOut[1],in_or_out2=$InOrOut[2],in_or_out3=$InOrOut[3],in_or_out4=$InOrOut[4], ".
   "speed=$speed,speed_out=$speed_out,speed2=$speed2, ".
   "start_hour=$start_hour,end_hour=$end_hour,k=$k, ".
   "m2_to_m1=$m2_to_m1,".
   "flags='$flags',".
   "preset=$preset,".
   "newuser_opt=$newuser_opt,".
   "offices='$offices',".
   "usr_grp='$usr_grp',".
   "pays_opt='$pays_opt',".
   "script='".Filtr_mysql(trim($F{plan_script}))."',".
   "descr='".Filtr_mysql(trim($F{descr}))."'".
  " WHERE id=$Fid LIMIT 1";

 $rows=Db->do($sql);

 $rows<1 && &Error("Ошибка. Данные $cname (№ $Fid) не изменены!");

 $h=$name? qq{имя тарифа "$name"} : 'тариф неактивный (свободный)';
 $mess="Изменен тариф № $Fid, ".(!$old_name? "до редактирования тариф был неактивным (свободным). Сейчас $h":
       $old_name ne $name? qq{до редактирования у тарифа было имя "$old_name", сейчас $h} : $h);

 Pay_to_DB( type => 50, category => 471, reason => "Ядру пока не сообщено об изменении тарифов", coment => $mess );

 $mess = "$Adm->{info_line} $mess";

 ToLog("! $mess");
 Show MessageBox("Тариф ".&ahref("$scrpt&act=show&id=$Fid",&Del_Sort_Prefix($name))." сохранен.".$br2.
   'Послать серверу сигнал '.&ahref("$scrpt&a=restart&act=send&s=2",'Обновить тарифы').' для применения изменений.'.$br2.
   'Посылайте сигнал после того как закончите изменения всех тарифов.'.$br2.&ahref("$scrpt&act=list",'Список тарифов'));
}


# =============================
# Отображение выбранного тарифа
# =============================

sub Get_filtr_fields
{
 my @f = @_;
 return map{ v::filtr($p->{$_}) } (@f);
}

sub show
{
 $p=&sql_select_line($dbh,"SELECT * FROM plans2 WHERE id=$Fid");
 $p or &Error("Ошибка получения данных тарифа № $Fid.");

 $name=&Filtr($p->{name});
 $sort_prefix=$name=~s|^\[(\d+)\]||? $1-1000 : '';
 $sort_prefix=0 if $sort_prefix<0;
 ($m1,$m2,$m3,$m4,$price,$price_change,$over1,$over2,$over3,$over4)=&Get_fields('mb1','mb2','mb3','mb4','price','price_change','priceover1','priceover2','priceover3','priceover4');
 ($m2_to_m1,$start_hour,$end_hour,$k,$flags,$speed,$speed_out,$speed2,$preset)=&Get_fields('m2_to_m1','start_hour','end_hour','k','flags','speed','speed_out','speed2','preset');
 ($InOrOut1,$InOrOut2,$InOrOut3,$InOrOut4,$offices,$usr_grp,$pays_opt,$newuser_opt)=&Get_fields('in_or_out1','in_or_out2','in_or_out3','in_or_out4','offices','usr_grp','pays_opt','newuser_opt');
 ($plan_script,$descr)=&Get_fields('script','descr');

 $listx="<option value=0>Вход</option><option value=1>Выход</option><option value=2>Сумма</option><option value=3>Большее</option>";
 @in_out=();
 foreach $i (1..4)
 {
    ${"over$i"}=sprintf("%.5f",${"over$i"}) if ${"over$i"} && ${"over$i"}<0.001;
    ${"m$i"}='!' if ${"m$i"}>=$cfg::unlim_mb;
    $in_out[$i]=$listx;
    $h=$name? ${"InOrOut$i"} : 2; # если тариф новый, то оплачиваетммая составляющая - `суммарный трафик`
    $in_out[$i]=~s/$h/$h selected/;
    $in_out[$i]="<select name=w$i size=1>$in_out[$i]</select>";
 }

 # Получим названия направлений из пресета
 ($class1,$class2,$class3,$class4)=('','','',''); # если в пресете не будут указаны
 $sth=&sql($dbh,"SELECT * FROM nets WHERE preset=$preset AND priority=0");
 ${'class'.$_->{class}}=v::filtr($_->{comment}) while ($_=$sth->fetchrow_hashref);

 $presets='';
 foreach (sort {$a <=> $b} (keys %Presets)) {$presets.="<br>&nbsp;&nbsp;<b>$_</b> - $Presets{$_}"}

 $Offices='';
 $Offices.="<input type=checkbox value=1 name=of_$_".($offices=~/,$_,/ && ' checked').
    "> $cfg::Offices{$_}".$br foreach (sort {$a <=> $b} (keys %cfg::Offices));
 $Offices=&bold('Нет отделов. В настройках укажите как минимум один') unless $Offices;

 $Usr_grp='';
 foreach ( sort{ $Ugrp->{$a}{name} cmp $Ugrp->{$b}{name} } keys %$Ugrp )
 {
    $Adm->{grp_lvl}{$_} or next; # доступ к этой группе полностью заблокирован
    $Usr_grp.="<input type=checkbox value=1 name=ugrp_$_".($usr_grp=~/,$_,/ && ' checked')."> $Ugrp->{$_}{name}".$br;
 }

 $Pays_opt='';

 $list_nu_opt='';

 Show form_a('act'=>'save','id'=>$Fid);
 Show Table('tbg3 width100',&RRow('head nav2','cc',&submit('Сохранить'),$br.&ahref($scrpt,'Список тарифов').$br)) if $Adm->{pr}{edt_tarifs};

 Show "<table><tr><td valign=top><table class='tbg3 width100'>".
   &RRow('*','ll',v::input_t(name=>'name',value=>$name),'Название тарифа. Отсутствие названия считается освобождением пакета').
   &RRow('*','ll',v::input_t(name=>'sort_prefix',value=>$sort_prefix).' порядок сортировки','Число').
   &RRow('*','ll',v::input_t(name=>'preset', value=>$preset).' пресет','Число, указывающее номер пресета по которому для данного тарифного плана из таблицы описания сетей будут выбраны '.
                 "названия направлений и подсети для этих направлений. Вы можете указывать пресеты:$presets").
   ($list_nu_opt && &RRow('*','ll',$list_nu_opt,'Предустановленное подключение. Если при создании учетной записи клиента будет выбран текущий пакет, то автоматически будет оформлено снятие за подключение, указанное в этом поле.'));

 $out=join $br,map{ "<input type=checkbox name=flag$_ value=1".($flags=~/$_/ && ' checked')."> - $Flags{$_}" }(sort keys %Flags);
 Show RRow('*','L',$out);

 Show RRow('*','ll',v::input_t(name=>'price',value=>$price)." стоимость тарифного плана",
     "Данная сумма будет сниматься со счета клиента в независимости от количества потребленных предоплаченных мегабайт. По сути абонплата. ".
     "Установите в 0, если вы предусматриваете оплату только пропорционально потребленному трафику").
  &RRow('*','ll',v::input_t(name=>'price_change',value=>$price_change)." стоимость перехода","Стоимость перехода на данный пакет в середине месяца").
  &RRow('*','ll',v::input_t(name=>'speed',value=>$speed||'')." скорость трафика",
    "Скорость, на которой будет предоставляться доступ в интернет. 0 либо пустое значение не ограничивает скорость.").
  &RRow('*','ll',v::input_t(name=>'speed_out',value=>$speed_out||'')." скорость трафика на исход",
    "Исходящая скорость. 0 либо пустое значение указывает на то, что исходящая скорость будет являться частью входящей, т.е. ограничение по скорости будет действовать на сумму входящей и исходящей скорости").
  &RRow('*','C',"Направление №1. <b>$class1</b>").
  &RRow('*','ll',v::input_t(name=>'m1',value=>$m1)." предоплаченный трафик, Мб",
    'Количество трафика которое не оплачивается, т.е. входит в абонплату. Укажите '.v::commas('!').' (символ '.v::commas('восклицательный знак').') для безлимита').
  &RRow('*','ll',v::input_t(name=>'o1',value=>$over1)." стоимость превышения, $gr/Мб",
    "Стоимость каждого мегабайта превышения предоплаченного трафика. Если данный параметр будет равен 0, то при достижении предоплаченного трафика доступ в интернет блокируется до наступления нового месяца").
  &RRow('*','ll',"$in_out[1] Оплачиваемая составляющая",
    "Составляющая трафика, которая будет тарифицироваться. Например, если выбран 'вход' - исходящий трафик не будет учитываться при подсчете стоимости данного направления").
  &RRow('*','C',"Направление №2. <b>$class2</b>").
  &RRow('*','ll',v::input_t(name=>'m2',value=>$m2)." предоплаченный трафик, Мб",
    "Количество трафика которое не оплачивается, т.е. входит в абонплату").
  &RRow('*','ll',v::input_t(name=>'o2',value=>$over2)." стоимость превышения, $gr/Мб",
    "Стоимость каждого мегабайта превышения предоплаченного трафика. Если данный параметр будет равен 0, для данного пакета трафик данного направления будет добавляться к направлению №1. ".
    "Например, таким образом можно для выбранных пакетов отключать деление на город/внешний трафик, но для других  пакетов разделение производить").
  &RRow('*','ll',"$in_out[2] оплачиваемая составляющая",
    "Составляющая трафика, которая будет тарифицироваться. Например, если выбран 'вход' - исходящий трафик не будет учитываться при подсчете стоимости данного направления").
  &RRow('*','ll',v::input_t(name=>'m2_to_m1',value=>$m2_to_m1)." отношение Направл.2 / Направл.1",
    "Если не равно 0, то при невыработке трафика направления №1, оставшийся трафик этого направления будет 'погашен' в заданном соотношении данным типом трафика. Читайте документацию для разъяснения").
  &RRow('*','C',"Направление №3. <b>$class3</b>").
  &RRow('*','ll',v::input_t(name=>'m3',value=>$m3)." предоплаченный трафик, Мб",
    "Количество трафика которое не оплачивается, т.е. входит в абонплату").
  &RRow('*','ll',v::input_t(name=>'o3',value=>$over3)." стоимость превышения, $gr/Мб",
    "Стоимость каждого мегабайта превышения предоплаченного трафика. Если данный параметр будет равен 0, для данного пакета трафик данного направления будет добавляться к направлению №1. ".
    "Например, таким образом можно для выбранных пакетов отключать деление на город/внешний трафик, но для других  пакетов разделение производить").
  &RRow('*','ll',"$in_out[3] оплачиваемая составляющая",
    "Составляющая трафика, которая будет тарифицироваться. Например, если выбран 'вход' - исходящий трафик не будет учитываться при подсчете стоимости данного направления").
  &RRow('*','C',"Направление №4. <b>$class4</b>").
  &RRow('*','ll',v::input_t(name=>'m4',value=>$m4)." предоплаченный трафик, Мб",
    "Количество трафика которое не оплачивается, т.е. входит в абонплату").
  &RRow('*','ll',v::input_t(name=>'o4',value=>$over4)." стоимость превышения, $gr/Мб",
    "Стоимость каждого мегабайта превышения предоплаченного трафика. Если данный параметр будет равен 0, для данного пакета трафик данного направления будет добавляться к направлению №1. ".
    "Например, таким образом можно для выбранных пакетов отключать деление на город/внешний трафик, но для других  пакетов разделение производить").
  &RRow('*','ll',"$in_out[4] Оплачиваемая составляющая",
    "Составляющая трафика, которая будет тарифицироваться. Например, если выбран 'вход' - исходящий трафик не будет учитываться при подсчете стоимости данного направления").
  &RRow('head','C',"Тарификация по времени. Установите в 0 начальное и конечное время для отключения тарификации (доступа) по времени").
  &RRow('*','ll',v::input_t(name=>'k',value=>$k)." действие",
    "Действие, которое будет осуществляться в промежуток времени между начальным и конечным часом суток.".$br2.
     '= 0 - никаких действий'.$br2.
     '&gt; 0 - на это число будет умножаться трафик клиента, полученный в промежуток времени между '.
     '`начальным` и `конечным` часом.'.$br2.
     '&lt; 0 - означает, что вне данного промежутка времени доступ будет блокироваться. '.
     'Таким образом в период от первого до второго значения при авторизации доступ будет разрешаться. '.$br2.
     '= 1 - в указанный интервал времени трафик направления 1 будет засчитан как направление '.
     ($Traf_change_dir? "2, а направление 3 - как направление 4" : "3, а направление 2 - как направление 4")
   ).
  &RRow('*','ll',v::input_t(name=>'s',value=>$start_hour).' начальное время','Час суток').
  &RRow('*','ll',v::input_t(name=>'e',value=>$end_hour).' конечное время','Час суток').
  
  &RRow('head','C',&bold_br('Скорости неосновного направления')).
  &RRow('*','ll',v::input_t(name=>'speed2',value=>$speed2||''),
    "Скорость, на которой будет предоставляться доступ к альтернативным (неосновным) направлениям. 0 либо пустое значение указывает формировать скорость по правилам основного направления.").
 
  &RRow('head','C',&bold_br('Программирование поведения тарифа')).
  &RRow('*','ll',v::input_ta('plan_script',$plan_script,30,5),'Данный параметр предусматривает изменение поведения тарифа в зависимости от ситуации. Каждое из поведений может использоваться только при покупке разрешения у разработчиков'.
    $br2.'0 - динамическое управленеи скоростями'.$br2.
    $br2."8:xx - пропорциональная ежедневная абонплата, где хх $gr - размер снимаемой суммы в месяц".$br2.
    "9:xx - суточная абонплата в размере xx $gr"
  ).
  &RRow('head','C',&bold_br('Описание для клиентов')).
  &RRow('*','C',v::input_ta('descr',$descr,70,6)).
 '</table>';

  Show "</td><td valign=top>".
    MessageBox('Список отделов, администраторы которых будут иметь доступ к данному тарифу'.$br2.$Offices.$br2.
        'Список групп клиентов, которые смогут заказывать данный тариф через клиентскую статистику. Обратите внимание, '.
        'что этот параметр касается сугубо заказа пакетов на следующий месяц, на администраторов данный параметр не распространяется.<br><br>'.
        $Usr_grp.$br2
   ).
   '</td></tr></table></form>';
}

1;
